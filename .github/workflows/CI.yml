name: CI
env:
  DEBUG: napi:*
  APP_NAME: napi-rs-image-test
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_INCREMENTAL: '1'
'on':
  push:
    branches:
      - master
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Install dependencies
        run: yarn install
      - name: Oxlint
        run: yarn lint
      - name: Cargo fmt
        run: cargo fmt -- --check
      - name: Clippy
        run: cargo clippy
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: yarn build --target x86_64-apple-darwin

          - host: macos-latest
            target: aarch64-apple-darwin
            build: yarn build --target aarch64-apple-darwin

          # - host: windows-latest
          #   build: yarn build --target x86_64-pc-windows-msvc
          #   target: x86_64-pc-windows-msvc

          # - host: windows-latest
          #   build: yarn build --target i686-pc-windows-msvc
          #   target: i686-pc-windows-msvc

          # - host: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   build: yarn build --target aarch64-pc-windows-msvc

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: yarn build --target x86_64-unknown-linux-gnu

          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: yarn build --target x86_64-unknown-linux-musl --use-napi-cross

          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu 
            build: yarn build --target aarch64-unknown-linux-gnu --use-napi-cross

          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: yarn build --target armv7-unknown-linux-gnueabihf --use-napi-cross

          - host: ubuntu-latest
            target: aarch64-linux-android
            build: yarn build --target aarch64-linux-android

          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: yarn build --target aarch64-unknown-linux-musl --use-napi-cross

    name: stable - ${{ matrix.settings.target }} - node@22
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.napi-rs
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: mlugg/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.14.1
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - uses: lukka/get-cmake@latest
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ee0973d8090e4e3e452244bb50d34c25fe907dc2
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup mac OS dependencies
        if: ${{ matrix.settings.host == 'macos-latest' }}
        run: |
          brew install pkgconf dav1d 
      - name: Setup linux dependencies
        if: ${{ matrix.settings.host == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential

      - name: Setup > x86_64-unknown-linux-gnu
        if: ${{ matrix.settings.target == 'x86_64-unknown-linux-gnu' }}
        run: |
          vcpkg install dav1d:x64-linux-static
          echo "PKG_CONFIG_PATH=${{ github.workspace }}/vcpkg/installed/x64-linux-static/lib/pkgconfig:PKG_CONFIG_PATH=${{ github.workspace }}/vcpkg/installed/x64-linux-static/lib/pkgconfig" >> $GITHUB_ENV
          
      - name: Setup > aarch64-unknown-linux-gnu
        if: ${{ matrix.settings.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          # Create vcpkg triplet file for aarch64-linux if it doesn't exist
          mkdir -p ${{ github.workspace }}/vcpkg/triplets/community
          if [ ! -f "${{ github.workspace }}/vcpkg/triplets/community/arm64-linux.cmake" ]; then
            cat > ${{ github.workspace }}/vcpkg/triplets/community/arm64-linux.cmake << 'EOF'
          set(VCPKG_TARGET_ARCHITECTURE arm64)
          set(VCPKG_CRT_LINKAGE dynamic)
          set(VCPKG_LIBRARY_LINKAGE static)
          set(VCPKG_CMAKE_SYSTEM_NAME Linux)
          set(VCPKG_CMAKE_SYSTEM_PROCESSOR aarch64)
          set(VCPKG_CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
          set(VCPKG_CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
          EOF
          fi

          vcpkg install dav1d:arm64-linux --overlay-triplets=${{ github.workspace }}/vcpkg/triplets/community

          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${{ github.workspace }}/vcpkg/installed/arm64-linux/lib/pkgconfig" >> $GITHUB_ENV
          
      - name: Setup > armv7-unknown-linux-gnueabihf
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        run: |
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
          # Create vcpkg triplet file for arm-linux if it doesn't exist
          mkdir -p ${{ github.workspace }}/vcpkg/triplets/community
          if [ ! -f "${{ github.workspace }}/vcpkg/triplets/community/arm-linux.cmake" ]; then
            cat > ${{ github.workspace }}/vcpkg/triplets/community/arm-linux.cmake << 'EOF'
          set(VCPKG_TARGET_ARCHITECTURE arm)
          set(VCPKG_CRT_LINKAGE dynamic)
          set(VCPKG_LIBRARY_LINKAGE static)
          set(VCPKG_CMAKE_SYSTEM_NAME Linux)
          set(VCPKG_CMAKE_SYSTEM_PROCESSOR arm)
          set(VCPKG_CMAKE_C_COMPILER arm-linux-gnueabihf-gcc)
          set(VCPKG_CMAKE_CXX_COMPILER arm-linux-gnueabihf-g++)
          EOF
          fi

          vcpkg install dav1d:arm-linux --overlay-triplets=${{ github.workspace }}/vcpkg/triplets/community
          
          echo "CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
          echo "CXX_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++" >> $GITHUB_ENV
          echo "AR_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${{ github.workspace }}/vcpkg/installed/arm-linux/lib/pkgconfig" >> $GITHUB_ENV

      - name: Setup > x86_64-unknown-linux-musl
        if: ${{ matrix.settings.host == 'ubuntu-latest' && matrix.settings.target == 'x86_64-unknown-linux-musl' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm meson ninja-build  musl-tools build-essential pkg-config
          git clone https://code.videolan.org/videolan/dav1d.git
          cd dav1d
          meson setup build --default-library=static --prefix=/usr --libdir=lib
          echo "About to start ninja build"
          sudo ninja -C build
          sudo ninja -C build install
          echo "Ninja build done"
          sudo tee /usr/local/bin/x86_64-linux-musl-pkg-config > /dev/null <<'EOF'
          #!/bin/sh
          exec pkg-config "$@"
          EOF
          sudo chmod +x /usr/local/bin/x86_64-linux-musl-pkg-config
          head -n 5 /usr/local/bin/x86_64-linux-musl-pkg-config
          ls -l /usr/local/bin/x86_64-linux-musl-pkg-config
          /usr/local/bin/x86_64-linux-musl-pkg-config --version

      - name: Setup > aarch64-unknown-linux-musl
        if: ${{ matrix.settings.target == 'aarch64-unknown-linux-musl' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools nasm meson ninja-build build-essential pkg-config \
            gcc-aarch64-linux-gnu libc6-dev-arm64-cross
          
          # Create meson cross-compilation file for aarch64
          sudo tee /tmp/aarch64-cross.txt > /dev/null <<'EOF'
          [binaries]
          c = 'aarch64-linux-gnu-gcc'
          cpp = 'aarch64-linux-gnu-g++'
          ar = 'aarch64-linux-gnu-ar'
          strip = 'aarch64-linux-gnu-strip'
          pkgconfig = 'pkg-config'

          [host_machine]
          system = 'linux'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'
          EOF
          
          # Build dav1d for both x86_64 and aarch64
          git clone --depth 1 https://code.videolan.org/videolan/dav1d.git
          cd dav1d
          
          # Build for x86_64 first (for host system)
          meson setup build-x86_64 --default-library=static --prefix=/usr --libdir=lib
          sudo ninja -C build-x86_64
          sudo ninja -C build-x86_64 install
          
          # Build for aarch64 with cross-compilation
          meson setup build-aarch64 --default-library=static --prefix=/usr/aarch64-linux-gnu --libdir=lib \
              --cross-file=/tmp/aarch64-cross.txt
          sudo ninja -C build-aarch64
          sudo ninja -C build-aarch64 install
          
          cd ..
          rm -rf dav1d
          
          # Create pkg-config wrappers for musl (both x86_64 and aarch64)
          sudo tee /usr/local/bin/x86_64-linux-musl-pkg-config > /dev/null <<'EOF'
          #!/bin/sh
          exec pkg-config "$@"
          EOF
          sudo chmod +x /usr/local/bin/x86_64-linux-musl-pkg-config
          
          sudo tee /usr/local/bin/aarch64-linux-musl-pkg-config > /dev/null <<'EOF'
          #!/bin/sh
          export PKG_CONFIG_PATH=/usr/aarch64-linux-gnu/lib/pkgconfig
          export PKG_CONFIG_LIBDIR=/usr/aarch64-linux-gnu/lib/pkgconfig
          exec pkg-config "$@"
          EOF
          sudo chmod +x /usr/local/bin/aarch64-linux-musl-pkg-config
          
          # Add musl target
          rustup target add aarch64-unknown-linux-musl
          
      - name: Setup > x86_64-pc-windows-msvc
        if: ${{ matrix.settings.host == 'windows-latest' && matrix.settings.target == 'x86_64-pc-windows-msvc' }}
        run: |
          choco install pkgconfiglite
          vcpkg install dav1d:x64-windows-static
          echo "${{ github.workspace }}/vcpkg"
          echo "PKG_CONFIG_PATH=${{ github.workspace }}/vcpkg/installed/x64-windows-static/lib/pkgconfig;${{ github.workspace }}/vcpkg/packages/dav1d_x64-windows-static/lib/pkgconfig;VCPKG_ROOT\installed\x64-windows-static\lib\pkgconfig" >> $env:GITHUB_ENV

      - name: Setup > i686-pc-windows-msvc
        if: ${{ matrix.settings.host == 'windows-latest' && matrix.settings.target == 'i686-pc-windows-msvc' }}
        run: |
          choco install pkgconfiglite
          vcpkg install dav1d:x86-windows-static
          echo "PKG_CONFIG_PATH=${{ github.workspace }}/vcpkg/installed/x86-windows-static/lib/pkgconfig;${{ github.workspace }}/vcpkg/packages/dav1d_x86-windows-static/lib/pkgconfig;VCPKG_ROOT\installed\x86-windows-static\lib\pkgconfig" >> $env:GITHUB_ENV

      - name: Setup > aarch64-pc-windows-msvc
        if: ${{ matrix.settings.host == 'windows-latest' && matrix.settings.target == 'aarch64-pc-windows-msvc' }}
        run: |
          choco install pkgconfiglite
          vcpkg install dav1d:arm64-windows-static
          echo "PKG_CONFIG_PATH=${{ github.workspace }}/vcpkg/installed/aarch64-windows-static/lib/pkgconfig;${{ github.workspace }}/vcpkg/packages/dav1d_arm64-windows-static/lib/pkgconfig;VCPKG_ROOT\installed\aarch64-windows-static\lib\pkgconfig" >> $env:GITHUB_ENV

      - name: Setup Android dependencies
        if: ${{ matrix.settings.target == 'aarch64-linux-android' }}
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          
      - name: Install vcpkg dependencies (aarch64-linux-android)
        if: ${{ matrix.settings.target == 'aarch64-linux-android' }}
        run: |
          vcpkg install dav1d:arm64-android || echo "Using system libraries for Android"
          
      - name: Setup Android NDK (aarch64-linux-android)
        if: ${{ matrix.settings.target == 'aarch64-linux-android' }}
        run: |
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
          echo "CC_aarch64_linux_android=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "CXX_aarch64_linux_android=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          if [ -d "${{ github.workspace }}/vcpkg/installed/arm64-android" ]; then
            echo "PKG_CONFIG_PATH=${{ github.workspace }}/vcpkg/installed/arm64-android/lib/pkgconfig" >> $GITHUB_ENV
          fi
          
      - name: Install dependencies
        run: yarn install
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          CARGO_FEATURE_VCPKG: 1
          VCPKG_ROOT: ${{ github.workspace }}/vcpkg
          PKG_CONFIG_x86_64_unknown_linux_musl: /usr/local/bin/x86_64-linux-musl-pkg-config
          PKG_CONFIG_aarch64_unknown_linux_musl: /usr/local/bin/aarch64-linux-musl-pkg-config
          CC_aarch64_unknown_linux_musl: ${{ matrix.settings.target == 'aarch64-unknown-linux-musl' && 'aarch64-linux-gnu-gcc' || '' }}
          CXX_aarch64_unknown_linux_musl: ${{ matrix.settings.target == 'aarch64-unknown-linux-musl' && 'aarch64-linux-gnu-g++' || '' }}
          AR_aarch64_unknown_linux_musl: ${{ matrix.settings.target == 'aarch64-unknown-linux-musl' && 'aarch64-linux-gnu-ar' || '' }}
          STRIP_aarch64_unknown_linux_musl: ${{ matrix.settings.target == 'aarch64-unknown-linux-musl' && 'aarch64-linux-gnu-strip' || '' }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: ${{ matrix.settings.target == 'aarch64-unknown-linux-musl' && 'aarch64-linux-gnu-gcc' || '' }}
          PKG_CONFIG_PATH_aarch64_unknown_linux_musl: ${{ matrix.settings.target == 'aarch64-unknown-linux-musl' && '/usr/aarch64-linux-gnu/lib/pkgconfig' || '' }}
          PKG_CONFIG_LIBDIR_aarch64_unknown_linux_musl: ${{ matrix.settings.target == 'aarch64-unknown-linux-musl' && '/usr/aarch64-linux-gnu/lib/pkgconfig' || '' }}


      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            ${{ env.APP_NAME }}.*.node
            ${{ env.APP_NAME }}.*.wasm
          if-no-files-found: error
  # build-freebsd:
  #   runs-on: ubuntu-latest
  #   name: Build FreeBSD
  #   steps:
  #     - uses: actions/checkout@v5
  #     - name: Build
  #       id: build
  #       uses: cross-platform-actions/action@v0.29.0
  #       env:
  #         DEBUG: napi:*
  #         RUSTUP_IO_THREADS: 1
  #       with:
  #         operating_system: freebsd
  #         version: '14.2'
  #         memory: 8G
  #         cpu_count: 3
  #         environment_variables: DEBUG RUSTUP_IO_THREADS
  #         shell: bash
  #         run: |
  #           sudo pkg install -y -f curl node libnghttp2 npm cmake
  #           sudo npm install -g yarn --ignore-scripts
  #           curl https://sh.rustup.rs -sSf --output rustup.sh
  #           sh rustup.sh -y --profile minimal --default-toolchain stable
  #           source "$HOME/.cargo/env"
  #           echo "~~~~ rustc --version ~~~~"
  #           rustc --version
  #           echo "~~~~ node -v ~~~~"
  #           node -v
  #           echo "~~~~ yarn --version ~~~~"
  #           yarn --version
  #           pwd
  #           ls -lah
  #           whoami
  #           env
  #           freebsd-version
  #           yarn install
  #           yarn build
  #           rm -rf node_modules
  #           rm -rf target
  #           rm -rf .yarn/cache
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: bindings-freebsd
  #         path: ${{ env.APP_NAME }}.*.node
  #         if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            architecture: x64
          - host: windows-11-arm
            target: aarch64-pc-windows-msvc
            architecture: arm64
          - host: macos-latest
            target: aarch64-apple-darwin
            architecture: arm64
          - host: macos-latest
            target: x86_64-apple-darwin
            architecture: x64
        node:
          - '20'
          - '22'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          architecture: ${{ matrix.settings.architecture }}
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: yarn test
        working-directory: .
  test-linux-binding:
    name: Test ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-gnueabihf
        node:
          - '20'
          - '22'
    runs-on: ${{ contains(matrix.target, 'aarch64') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
      - name: Output docker params
        id: docker
        run: |
          node -e "
            if ('${{ matrix.target }}'.startsWith('aarch64')) {
              console.log('PLATFORM=linux/arm64')
            } else if ('${{ matrix.target }}'.startsWith('armv7')) {
              console.log('PLATFORM=linux/arm/v7')
            } else {
              console.log('PLATFORM=linux/amd64')
            }
          " >> $GITHUB_OUTPUT
          node -e "
            if ('${{ matrix.target }}'.endsWith('-musl')) {
              console.log('IMAGE=node:${{ matrix.node }}-alpine')
            } else {
              console.log('IMAGE=node:${{ matrix.node }}-slim')
            }
          " >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: |
          yarn config set --json supportedArchitectures.cpu '["current", "arm64", "x64", "arm"]'
          yarn config set --json supportedArchitectures.libc '["current", "musl", "gnu"]'
          yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ contains(matrix.target, 'armv7') }}
        with:
          platforms: all
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: ${{ contains(matrix.target, 'armv7') }}
      - name: Test bindings
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.docker.outputs.IMAGE }}
          options: '-v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }} --platform ${{ steps.docker.outputs.PLATFORM }}'
          run: yarn test
  publish:
    name: Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    needs:
      - lint
      # - build-freebsd
      - test-macOS-windows-binding
      - test-linux-binding
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: create npm dirs
        run: yarn napi create-npm-dirs
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
